myTable = data.frame()
edit(myTable)
myTable = data.frame()
edit(myTable)
myTable = data.frame()
edit(myTable)
myTable = data.frame()
edit(myTable)
library(datasets)
library(datasets)
data(iris)
data
library(datasets)
data(iris)
?iris
iris
iris3
lapply(iris, mean)
lapply(iris3, mean)
lapply(iris, mean)
lapply(iris, mean, virginica)
?list
iris
names(iris)
vir(iris, "Species" == "virginica")
vir= (iris, "Species" == "virginica")
tapply(iris$Sepal.lenght, iris$Species, mean)
vir= (iris, Species == "virginica")
vir= (iris, Species = "virginica")
tapply(iris$Sepal.lenght, iris$Species, mean, na.rm=TRUE)
lapply(iris$Sepal.lenght, iris$Species, mean, na.rm=TRUE)
lapply(iris$Species, mean, na.rm=TRUE)
lapply(iris$Sepal.lenght, iris$Species, mean, na.rm=TRUE)
cleab
clean
clean()
vir= (iris, Species == virginica)
vir(iris, Species == virginica)
subset(iris, Species == virginica)
subset(iris, Species == "virginica")
lapply(subset(iris, Species == "virginica"), mean)
names(iris)
rowMeans(iris[, 1:4])
apply(iris[,1:4], 2, mean)
lapply(iris, function(sub), sub = subset(iris3, Sepal.Lenght))
lapply(iris, function(sub) sub = subset(iris3, Sepal.Lenght))
lapply(iris, function(sub) sub = subset(iris3, "Sepal.Lenght""))
lapply(iris, function(sub), sub = subset(iris3, Sepal.Lenght))
lapply(iris, function(sub), sub = subset(iris3, [, 1]))
lapply(iris, function(sub) sub = subset(iris3, [, 1]))
lapply(iris, function(sub) sub = subset(iris3[, 1]))
subset(iris, Species == virginica)
lapply(subset(iris, Species == "virginica"), mean)
lapply(subset(iris, Species == "virginica"), mean, na.rm = TRUE)
lapply(subset(iris[, 4], Species == "virginica"), mean)
lapply(subset(iris[, 4] $ Species == "virginica"), mean)
lapply(subset(iris[1:4] $ Species == "virginica"), mean)
name(iris)
names()
names(iris)
sapply(subset(iris, Species == "virginica"), mean)
?lapply
vapply(subset(iris, Species == "virginica"), mean)
vapply(subset(iris, Species == "virginica"), mean, 2)
?apply
apply(subset(iris, Species == "virginica"), mean)
apply(subset(iris, Species == "virginica"), mean, 2)
apply(iris, mean)
apply(iris, mean, 2)
apply(iris,1, mean)
apply(iris, 2, mean)
?vector
x = c(a = 1, b = 2)
x
x = c(a = 1:6, b = 2:4)
x
x = c(a = 1:6, b = 2:4, mode = "numeric")
x
is.vectore(x)
is.vector(x)
as.vector(a = 1:6, b = 2:4, mode = "numeric")
x = c(2, tr, com, 5)
x = c(2, tr, com
)
x = (2, 3, tr)
x = (2, 3, "tr")
x = c(1,2,3)
x
x=c(q,e,r)
x=c(q,e,r, mode = "any")
x=c(q,e,r, mode = "character")
data(mtcars)
apply(mtcars, 2, means)
apply(mtcars, 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(mtcars, cyl, mean)
names(mtcars)
nrow(mtcars)
tapply(mtcars$cyl, mtcars$mpg, mean)
with(mtcars, tapply(hp, cyl, mean))
122.28571 - 209.21429
x = with(mtcars, tapply(hp, cyl, mean))
a = x[3]-x[2]
a
data(iris)
s = split(iris, iris$Species)
laplly(s, function(x) colMeans(x[, c("Sepal.Length",  "Sepal.Width", "Petal.Length",  "Petal.Width)]))
a = laplly(s, function(x) colMeans(x[, c("Sepal.Length",  "Sepal.Width", "Petal.Length",  "Petal.Width)]))
s
laplly(s, function(x) colMeans(x[, c("Sepal.Length")]))
s = split(iris, iris$Species)
apply(s, 2, mean)
apply(s[, 1:4], 2, mean)
laplly(s, function(x) colMeans(x[, c("Sepal.Length",  "Sepal.Width", "Petal.Length",  "Petal.Width)]))
data(airquality)
s = split(airquality, airquality$Month)
laplly(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
laplly(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
debug(ls)
ls
debug(ls)
laplly(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
traceback
debug(lapply)
laplly(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
traceback()
exit()
exit
quit()
quit
b<-c(6,8, 10, 2)
q
q
C
library(swirl)
swirl()
Sys.getlocale('LC_TIME')
library(lubridate)
help(package=lubridate)
today()
this_day=today()
this_day<-today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label=T)
wday(this_day, label=TRUE)
this_moment<-now()
this_moment
hour(this_moment)
my_date<-ymd('1989-05-17')
my_date
class(my_date)
ymd('1989 May 17')
mdy('March 12, 1975')
dmy(25081985)
ymd('192012')
ymd('192-01-2')
ymd('192/01/2')
ymd('1920/1/2')
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours=8, minutes=34, seconds=55)
this_moment
this_moment<-update(this_moment, now())
this_moment<-update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
nyc<-now('America/New_York')
nyc
depart<-nyc+days(2)
depart
depart<-update(depart, hours=17, minutes=34)
depart
arrive<-depart+hm(15:50)
arrive<-depart+hpurs(15)+minutes(50)
arrive<-depart+hours(15)+minutes(50)
?with_tz
arrive<-with_tz(arrive, tzone=Asia/Hong_Kong)
arrive<-with_tz(arrive, tzone='Asia/Hong_Kong')
arrive
last_time<-mdy('June 17, 2008')
last_time<-mdy('June 17, 2008', tz="Singapore")
last_time
?new_interval()
?new_interval
how_long<-new_interval(last_time, arrive)
as.period(how_long)
stopwatch()
x <- list(2, "a", "b", TRUE)
x[[1]]
class(x[[1]])
library(datasets)
x=data(airquality)
head(x, 2)
head(x, n=4)
x
?dtasets
?datasets
library(help = "datasets")
airguality
x=airquality
x
head(x, 4)
nrow(x)
tail(x,2)
x[47,]
sum(is.na(x$Ozone))
mean(x$Ozone)
mean(x$Ozone, rm.NA)
mean(x$Ozone, rm.NA=T)
colmean(x$Ozone, rm.NA=T)
mean(x$Ozone, rm.na=T)
mean(x$Ozone, na.rm=T)
mean(x$Solar.R(x$Ozone>31 & x$Temp>90))
y=subset(x$Ozone>31 & x$Temp>90))
y=subset(x$Ozone>31 & x$Temp>90)
y=subset(x, x$Ozone>31 & x$Temp>90)
head(y)
mean(y$Solar.R, na.rm=T)
y=subset(x, x$Month=5)
y=subset(x, x$Month==5)
mean(y, y$Temp)
mean(y, y$Temp, na.rm=T)
head(y)
mean(y$Temp)
mean(y$Temp, na.rm=T)
y=subset(x, x$Month==)
y=subset(x, x$Month==6)
mean(y$Temp, na.rm=T)
y=subset(x, x$Month==5)
max(y$Ozone)
max(y$Ozone, na.rm=T)
class(x <- c(4, TRUE))
z=rbind(x=c(1,2,3), y=c(3,4,5))
z
x <- c(17, 14, 4, 5, 13, 12, 10)
x[x > 10] <- 4
x
head(airguality, n=3)
x=airguality
data(airquality)
x=data(airquality)
summary(x)
x
x=airguality
libarary(datasets)
library(datasets)
head(airguality, n=3)
head(airquality, n=3)
tail(airquality, n=3)
a=airquality
a[47,]
sum(is.na(a$Ozone))
mean(a$Ozone, na.rm=T)
y=mean((subset(a, a$Ozone>31 & a$Temp>90)), Solar.R, na.rm=T
)
y=mean((subset(a, a$Ozone>31 & a$Temp>90))$Solar.R, na.rm=T)
y
mean((subset(a, a$Month==6)$Temp, na.rm=T)
mean((subset(a, a$Month==6)$Temp), na.rm=T)
max(subset(a, a$Month==5)$Ozone)
max(subset(a, a$Month==5)$Ozone, na.rm=T)
cube=function(x, n) {x^3}
cube=function(x, n) {x^3}
cube(3)
x=1:10
if(x.5){}
if(x.5){
)
if(x>5) {x<-0}
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("lubridate", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
span= intrval(ymd("2015-04-13", ymd("2015-05-05")))
span= interval(ymd("2015-04-13", ymd("2015-05-05")))
span= interval(ymd("2015-04-13"), ymd("2015-05-05")))
span= interval(ymd("2015-04-13"), ymd("2015-05-05"))
as.duration(span)
span= interval(ymd("2015-04-13"), ymd("2015-05-13"))
as.duration(span)
<- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
<- function(x) {g <- function(y) {y + z}, z <- 4, x + g(x)}
f<- function(x) {g <- function(y) {y + z}, z <- 4, x + g(x)}
f<- function(x) {g <- function(y) {y + z}; z <- 4; x + g(x)}
z<-10
f(3)
y=5
f(3)
z=4
f(3)
f(5)
z=1
f(5)
f(3)
f(4)
f<- function(x) {g <- function(y) {y + z}, z <- 10, x + g(x)}
f<- function(x) {g <- function(y) {y + z}; z <- 10; x + g(x)}
f(3)
z<-20
f(3)
x<-5
y<-if(x<3) {NA}; else {10}
y<-if(x<3) {NA}, else {10}
y<-if(x<3) {NA}; else {10}
y<-if(x<3) {NA}; else {10}
y<-if(x<3) {NA}; else {10}
y<-if(x<3) {
NA}; else {10}
y<-if(x<3) {
NA
} else {
10
}
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y <- if(x < 3) {
NA
} else {
10
}
y
y <- if(x < 3) {
NA
}; else {
10
}
y<-if(x<3) {NA} else {10}
y
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
h(2, 0, 3L)
h(2, 4, 8)
h(2, 10, 2)
h(2, 0, 3L)
q=cbind(2, 3L)
q+0
2/q
2/3L
q+NULL
h <- function(x, y = NULL, d = 3L) {
z <- cbind(x, d)
if(!is.null(y))
z <- z + y
else
z <- z + f
g <- x + y / z
if(d == 3L)
return(g)
g <- g + 10
g
}
cbind(2, 3L) + NULL
cbind(2, 3L) + 3
3 + NULL / cbind(2, 3L)
h(2, NULL, 3L)
h(2, 3L)
h(2, 2)
h(2, NULL, 2)
h(2, 0, 2)
2/cbind(2,2)
2 + 0 / cbind(2, 2)
class(cbind(2, 2))
0/cbind(2, 2)
2+1/cbind(2,2)
2+2/cbind(2,2)
mat9 <- matrix(c(rep(1, 3), rep(2, 3)), 2, byrow = T)
mat9
2+2/mat9
3+3/mat9
2+0/mat9
0/2
2/0
2+1/mat9
help()
library(lubridate)
install.packages(lubridate)
library(gglpot2)
library(ggplot2)
R.Version()
R.version()
R.Version()
results
a <- c("Sometimes","Sometimes","Never","Always","Always","Sometimes","Sometimes","Never")
b <- c("Maybe","Maybe","Yes","Maybe","Maybe","No","Yes","No")
results <- table(a,b)
results
dir.create('/Volumes/HD2/fat_ngs')
setwd("/Volumes/HD2/fat_ngs")
sri = read.csv("SraRunInfo.csv", stringsAsFactors=FALSE) #from http://www.ncbi.nlm.nih.gov/sra?term=SRP001537 (the entire experiment corresponding to GEO accession GSE18508), users can download a table of the metadata into a comma-separated tabular file “SraRunInfo.csv”. This file should be in working directory
fs = basename(sri$download_path)
for(f in fs) {
cmd = paste("fastq-dump --split-3", f) #convert the example data to FASTQ, use the fastq-dump command from the SRA Toolkit on each SRA file.
cat(cmd,"\n")
print(cmd) # invoke command
}
sri = read.csv("SraRunInfo.csv", stringsAsFactors=FALSE) #from http://www.ncbi.nlm.nih.gov/sra?term=SRP001537 (the entire experiment corresponding to GEO accession GSE18508), users can download a table of the metadata into a comma-separated tabular file “SraRunInfo.csv”. This file should be in working directory
sri = read.csv("SraRunInfo.csv", stringsAsFactors=FALSE) #from http://www.ncbi.nlm.nih.gov/sra?term=SRP001537 (the entire experiment corresponding to GEO accession GSE18508), users can download a table of the metadata into a comma-separated tabular file “SraRunInfo.csv”. This file should be in working directory
fs = basename(sri$download_path)
for(f in fs) {
cmd = paste("fastq-dump --split-3", f) #convert the example data to FASTQ, use the fastq-dump command from the SRA Toolkit on each SRA file.
cat(cmd,"\n")
print(cmd) # invoke command
}
for(i in 1:nrow(sri))
download_file= paste("prefetch ", sri$download_path[i], fs[i])
print= download_file
for(i in 1:nrow(sri))
download_file= paste("prefetch ", fs[i])
print= download_file
download_file
for(i in 1:nrow(sri)) {
download_file= paste("prefetch ", fs[i])
download_file
}
for(i in 1:nrow(sri)) {
download_file= paste("prefetch ", fs[i])
cat(download_file, '\n')
}
for(i in 1:nrow(sri)) {
download_file= paste("prefetch ", fs[i])
cat(download_file, '\n')
print(download_file)}
View(sri)
sri
setwd('/Volumes/HD2/Bioinformatic/R_for_NGS')
sri1 = read.csv("sri.csv", stringsAsFactors=FALSE) #from http://www.ncbi.nlm.nih.gov/sra?term=SRP001537 (the entire experiment corresponding to GEO accession GSE18508), users can download a table of the metadata into a comma-separated tabular file “SraRunInfo.csv”. This file should be in working directory
for(f in fs) {
cmd = paste("/Users/Vitaly/sratoolkit/bin/fastq-dump --split-3", f) #onvert the example data to FASTQ, use the fastq-dump command from the SRA Toolkit on each SRA file.
cat(cmd,"\n")
print(cmd) # invoke command
}
